{"version":3,"sources":["locales/en.js","locales/zh-TW.js","i18n/I18nContext.js","i18n/I18nProvider.js","i18n/useI18n.js","WeatherFetch.js","CityFetch.js","App.js","index.js"],"names":["I18nContext","createContext","t","getLocale","setLocale","I18nProvider","props","useState","locale","i18n","key","translations","Provider","value","children","useI18n","useContext","WeatherFetch","showForecast","setShowForecast","feelsLike","setFeelsLike","mainTemp","setMainTemp","description","setDescription","main","setMain","iconID","setIconID","weekly","setWeekly","useEffect","coord","length","fetchWeather","a","lang","fetch","lat","lng","apiKey","then","res","json","data","current","feels_like","temp","weather","icon","daily","slice","formatDate","date","newDate","Date","year","getFullYear","month","getMonth","day","getDate","city","className","flag","width","alt","src","onClick","xmlns","viewBox","fill","height","fillRule","d","clipRule","map","item","index","dt","CitySelect","inputValue","setInputValue","type","placeholder","onChange","event","target","setLocation","results","geometry","cityName","formatted","annotations","App","setCityName","setCoord","setFlag","href","dangerouslySetInnerHTML","__html","CityFetch","require","default","ReactDOM","render","locales","document","getElementById"],"mappings":"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","file":"static/js/main.ea1c4007.chunk.js","sourcesContent":["export default {\n  'system_header': 'The weather',\n  'system_description': 'Current weather and forecast',\n  'button_search': 'Search',\n  'button_clear': 'Clear',\n  'input_search_placeholder': 'City Name',\n  'search_city_first': 'Search city first',\n  'feels_like': 'Feels Like'\n};\n","export default {\n  'system_header': '探索氣象',\n  'system_description': '目前天氣概況與預報',\n  'button_search': '查詢',\n  'button_clear': '清除',\n  'input_search_placeholder': '城市名稱',\n  'search_city_first': '搜尋城市天氣',\n  'feels_like': '體感'\n};\n","import { createContext } from 'react';\n\nconst I18nContext = createContext({\n  t: () => '',\n  getLocale: () => { },\n  setLocale: () => { },\n});\n\nexport default I18nContext;\n","import React, { useState } from 'react';\nimport I18nContext from './I18nContext';\n\nconst I18nProvider = (props) => {\n  const [locale, setLocale] = useState('zh-TW');\n\n  const i18n = {\n    t: key => props.translations[locale][key],\n    getLocale: () => locale,\n    setLocale: locale => setLocale(locale),\n  };\n\n  return (\n    <I18nContext.Provider value={i18n}>\n      {props.children}\n    </I18nContext.Provider>\n  );\n};\n\nexport default I18nProvider;\n","import { useContext } from 'react';\nimport I18nContext from './I18nContext';\n\nfunction useI18n() {\n  const i18n = useContext(I18nContext);\n  return i18n;\n}\n\nexport default useI18n;\n","import React, { useEffect, useState } from \"react\";\nimport { useI18n } from './i18n'\n\nconst WeatherFetch = (props) => {\n  const { t, getLocale } = useI18n();\n  const [showForecast, setShowForecast] = useState(false);\n  const [feelsLike, setFeelsLike] = useState('');\n  const [mainTemp, setMainTemp] = useState('');\n  const [description, setDescription] = useState('');\n  const [main, setMain] = useState('');\n  const [iconID, setIconID] = useState('');\n  const [weekly, setWeekly] = useState([]);\n\n  useEffect(() => {\n    if (props.coord.length === 0) return;\n    fetchWeather(props)\n  }, [props]);\n\n  const fetchWeather = async (props) => {\n    let lang = getLocale() === 'zh-TW' ? 'zh_tw' : 'en';\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${props.coord.lat}&lon=${props.coord.lng}&appid=${props.apiKey}&units=metric&lang=${lang}`)\n      .then(res => res.json())\n      .then(data => {\n        setFeelsLike(data.current.feels_like);\n        setMainTemp(data.current.temp);\n        setDescription(data.current.weather[0].description);\n        setMain(data.current.weather[0].main);\n        setIconID(data.current.weather[0].icon);\n        setWeekly(data.daily.slice(1));\n      });\n  }\n\n  const formatDate = (date) => {\n    let newDate = new Date(date * 1000);\n    let year = newDate.getFullYear();\n    let month = newDate.getMonth() + 1;\n    let day = newDate.getDate();\n\n    return `${year}/${month}/${day}`;\n  }\n\n  const toggleForecast = () => {\n    setShowForecast(!showForecast);\n  }\n\n  return (\n    <>\n      {\n        (props.city.length === 0) ?\n          <h3 className=\"text-gray-100\">{t('search_city_first')}</h3>\n          :\n          <div className=\"mx-auto max-w-full rounded overflow-hidden shadow-lg md:px-20 sm:py-6 md:py-8 sm:px-8 bg-indigo-200\">\n            <div className=\"sm:flex\">\n              <div className=\"sm:w-1/2 lg:w-2/5\">\n                <h2 className=\"mt-6 mb-5\">{props.flag}&nbsp;{props.city}</h2>\n                <h3 >{mainTemp} &#8451;</h3>\n                <h3>{t('feels_like')}&nbsp;{feelsLike}&nbsp;&#8451;</h3>\n              </div>\n              <div className=\"sm:w-1/2 lg:w-2/5\">\n                <img className=\"inline object-center\" width=\"40\" alt={main} src={`http://openweathermap.org/img/wn/${iconID}@2x.png`} />\n                <h3>{description}</h3>\n              </div>\n              <div className=\"lg:w-1/5 flex items-end justify-end align-bottom\">\n                <div>\n                  <span className=\"text-gray-500\" onClick={toggleForecast}>\n                    {showForecast\n                      ?\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" width=\"20\" height=\"20\">\n                        <path fillRule=\"evenodd\" d=\"M4.293 15.707a1 1 0 010-1.414l5-5a1 1 0 011.414 0l5 5a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414 0zm0-6a1 1 0 010-1.414l5-5a1 1 0 011.414 0l5 5a1 1 0 01-1.414 1.414L10 5.414 5.707 9.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                      :\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" width=\"20\" height=\"20\">\n                        <path fillRule=\"evenodd\" d=\"M15.707 4.293a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-5-5a1 1 0 011.414-1.414L10 8.586l4.293-4.293a1 1 0 011.414 0zm0 6a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-5-5a1 1 0 111.414-1.414L10 14.586l4.293-4.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                    }\n                  </span>\n                </div>\n              </div>\n            </div>\n            {!showForecast\n              ? null\n              :\n              <div className=\"mt-8\">\n                <ul className=\"inline-grid sm:gap-y-3 md:grid-cols-7 md:gap-x-1 lg:gap-x-3\">\n                  {weekly && weekly.map((item, index) => {\n                    return <li key={index}\n                    >\n                      <div className=\"sm:flex sm:items-center md:block md:text-xs lg:text-base\">\n                        <p>{formatDate(item.dt)}</p>\n                        <img className=\"inline object-center\" alt={item.weather[0].main} src={`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`} />\n                        <p>{item.weather[0].description}</p>\n                        <p>{item.temp.day} &#8451;</p>\n                        <p className=\"sm:ml-3 sm:text-base md:text-sm lg:text-sm xl:text-base\">{t('feels_like')}&nbsp;{item.feels_like.day}&nbsp;&#8451;</p>\n                      </div>\n                    </li>\n                  })}\n                </ul>\n              </div >\n            }\n          </div>\n      }\n    </>\n  )\n}\nexport default WeatherFetch;\n","import React, { useState } from 'react'\nimport { useI18n } from './i18n'\n\nconst CitySelect = (props) => {\n  const { t, getLocale } = useI18n();\n  const [inputValue, setInputValue] = useState('');\n\n  const search = () => {\n    if (inputValue.length === 0) {\n      return\n    }\n    let lang = getLocale() === 'en' ? 'en' : 'native';\n    fetch(`https://api.opencagedata.com/geocode/v1/json?q=${inputValue}&key=${props.apiKey}&language=${lang}`)\n      .then(res => res.json())\n      .then(data => {\n        props.setLocation({\n          coord: data.results[0].geometry,\n          cityName: data.results[0].formatted,\n          flag: data.results[0].annotations.flag\n        });\n      });\n  };\n\n  const clear = () => {\n    setInputValue('')\n  };\n\n  const onInputChange = (event) => {\n    setInputValue(event.target.value);\n  }\n\n  return (\n    <div className=\"px-4 py-5 sm:p-6 grid sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-6\">\n      <div className=\"col-span-6 sm:col-span-4\">\n        <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          type=\"text\"\n          placeholder={t('input_search_placeholder')}\n          value={inputValue} onChange={onInputChange} />\n      </div>\n      <button className=\"py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 shadow-sm hover:bg-indigo-500 focus:outline-none focus:shadow-outline-blue active:bg-indigo-600 transition duration-150 ease-in-out\" onClick={search} >{t('button_search')}</button>\n      <button className=\"bg-white hover:bg-indigo-100 text-indigo-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\" onClick={clear} >{t('button_clear')}</button>\n    </div>\n  );\n\n};\n\nexport default CitySelect;\n","import React, { useState } from 'react'\nimport WeatherFetch from './WeatherFetch'\nimport CityFetch from './CityFetch'\nimport { useI18n } from './i18n'\n\nconst WEATHER_APP_Key = '5a41d35c009c3bb73c52b6817d03b311';\nconst CITY_APP_KEY = '6b13d976714f488792b849709ed745b8';\nconst App = () => {\n  const { t, getLocale, setLocale } = useI18n();\n  const [cityName, setCityName] = useState('');\n  const [coord, setCoord] = useState([]);\n  const [flag, setFlag] = useState('');\n\n  const onCityChange = (value) => {\n    setCityName(value.cityName);\n    setCoord(value.coord);\n    setFlag(value.flag);\n  }\n\n  return (\n    <div className=\"container px-8 mx-auto text-center items-center\">\n      <div className=\"text-right\">\n        <span href=\"#\" className={`no-underline ${getLocale() === 'zh-TW' ? 'text-gray-100' : 'text-blue-500 hover:underline cursor-pointer'}`} onClick={() => setLocale('zh-TW')}>中文</span>\n        <span className=\"text-gray-300\">&nbsp;|&nbsp;</span>\n        <span className={`no-underline ${getLocale() === 'en' ? 'text-gray-100' : 'text-blue-500 hover:underline cursor-pointer'}`} onClick={() => setLocale('en')}>English</span>\n      </div>\n      <div className=\"py-12\">\n        <div className=\"max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"\">\n            <h1 className=\"mt-2 leading-8 font-extrabold tracking-tight text-white sm:text-4xl sm:leading-10 uppercase \">\n              {t('system_header')}</h1>\n            <p className=\"mt-4 max-w-2xl text-xl leading-7 text-gray-500 lg:mx-auto\" dangerouslySetInnerHTML={{ __html: t('system_description') }} />\n          </div>\n        </div>\n        <div className=\"mt-10\">\n          <CityFetch setLocation={onCityChange} apiKey={CITY_APP_KEY} />\n          <WeatherFetch city={cityName} coord={coord} flag={flag} apiKey={WEATHER_APP_Key} />\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport { I18nProvider } from './i18n';\n\nconst locales = ['en', 'zh-TW'];\nconst translations = {\n  'en': require('./locales/en').default,\n  'zh-TW': require('./locales/zh-TW').default,\n}\n\nReactDOM.render(\n  <I18nProvider locales={locales} translations={translations}>\n    <App />\n  </I18nProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}